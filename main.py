from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command, CommandObject
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from magic_filter import F
from tinydb import TinyDB, Query
import logging
import asyncio
import googletrans
import requests
import connect

####    setup local variables, configs and other    ####

# logging settings
logging.basicConfig(level=logging.INFO, filename = "bot_logs.log", filemode="w")

# chatbot variables
bot = Bot(token="6414216172:AAESR33MikSbdNKLltT02w2fMZBtwKkyAYs")
dp = Dispatcher()

# local database variables
users = TinyDB("data/users_ids.json")
questions = TinyDB("data/irregular_questions.json")
feedback = TinyDB("data/feedback.json")
qur = Query()

# googletrans object
translator = googletrans.Translator()

#weather
def kelToCel(fah):
    cel = fah - 273.15
    return round(cel)
def get_weather_data():
    try:
        res = requests.get("http://api.openweathermap.org/data/2.5/forecast",
                           params={'id': 463828, 'units': 'metric', 'lang': 'ru', 'APPID': connect.weather_api})
        data = res.json()
        info = ""
        for i in data['list'][0:9]:
            info += " | ".join((i['dt_txt'], '{0:+3.0f}'.format(i['main']['temp']), i['weather'][0]['description']))
            info += "\n"
        return info
    except Exception as e:
        print("Exception (forecast):", e)
        pass

####    end of setup    ####

def msg_trans(message: types.Message, bot_msg: str):
    dest = users.table("users").search(qur.id == message.from_user.id)[-1]["lg"] if users.table("users").search(qur.id == message.from_user.id) != [] else "ru"
    translated = translator.translate(text=bot_msg, src="ru", dest=dest)
    return translated.text


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if users.table("users").search(qur.id == message.from_user.id) == []:

        await message.answer(
            text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name} {message.from_user.last_name}! –ù–∞–¥–µ–µ–º—Å—è —ç—Ç–æ—Ç –±–æ—Ç —Å—Ç–∞–Ω–µ—Ç –≤–∞—à–∏–º –ª—É—á—à–∏–º –ø–æ–º–æ—à–Ω–∏–∫–æ–º –ø—Ä–∏ –ø–æ—Å—â–µ–Ω–∏–∏ –∫—É—Ä—à—Å–∫–æ–π –∫–æ—Å—ã!"
                 f"\n\nWelcome {message.from_user.first_name} {message.from_user.last_name}! We hope this bot will become your best assistant when visiting the kurshskoy kosy!",
        )
        menu = [
            [InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π", callback_data="ru")],
            [InlineKeyboardButton(text="English", callback_data="en")],
            [InlineKeyboardButton(text="Deutsch", callback_data="nl")],
            [InlineKeyboardButton(text="‰∏≠ÂõΩ‰∫∫(chinese)", callback_data="zh-cn")],
            [InlineKeyboardButton(text="Espa√±ol", callback_data="es")],
        ]
        lang_menu = InlineKeyboardMarkup(inline_keyboard=menu)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫\n\nPlease select the language", reply_markup=lang_menu)

    else:
        await cmd_menu(message)


@dp.message(F.text.in_({"/menu", "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", "Menu openen", "Men√∫ abierto", "ÊâìÂºÄËèúÂçï", "Open menu"}))
async def cmd_menu(message: types.Message):
    labels = [
        msg_trans(message, "–í–æ–ø—Ä–æ—Å—ã –ø–æ—Å–µ—â–µ–Ω–∏—è"),
        msg_trans(message, "–ü–æ–≥–æ–¥–∞"),
        msg_trans(message, "–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è"),
        msg_trans(message, "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"),
    ]\

    kb = [
        [types.KeyboardButton(text=f"‚ùî {labels[0]}")],
        [types.KeyboardButton(text=f"‚õÖÔ∏è {labels[1]}")],
        [types.KeyboardButton(text=f"üìú {labels[2]}")],
        [types.KeyboardButton(text=f"üìù {labels[3]}")],
    ]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                         keyboard=kb,
                                         one_time_keyboard=False,
                                         input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é")

    await message.answer(text=msg_trans(message=message, bot_msg="–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ.\n–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é"), reply_markup=keyboard)


@dp.callback_query(F.data.in_({"ru", "en", "nl", "zh-cn", "es"}))
async def langsel(message):
    users.table("users").insert({
        "id": message.from_user.id,
        "lg": message.data
    })
    kb = [[
        KeyboardButton(text=msg_trans(message, "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"))
    ]]
    await bot.send_message(chat_id=message.from_user.id, text=msg_trans(message, bot_msg="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ç–µ–ø–µ–ø—å –≤—ã –º–æ–∂–µ—Ç–µ –≤ –ø–æ–ª–Ω–æ–π —Å—Ç–µ–ø–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–µ–ª–µ–±–æ—Ç–æ–º :)"), reply_markup=ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=True))
# –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã Q&A

@dp.message(F.text.startswith("‚ùî"))
async def qanda(message: types.Message):
    builder = InlineKeyboardBuilder()
    quest_txt = msg_trans(message=message, bot_msg="–í–æ–ø—Ä–æ—Å ")
    for i in range(1, 8):
        builder.button(text=f"{quest_txt} ‚Ññ{i}", callback_data=f"{i}")
    builder.adjust(2)
    await message.answer(msg_trans(message, bot_msg="""1.–í –∫–∞–∫–∏–µ –¥–Ω–∏ –∏ –≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–∫ ¬´–ö—É—Ä—à—Å–∫–∞—è –∫–æ—Å–∞¬ª –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è?
2.–ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –ö—É—Ä—à—Å–∫—É—é –∫–æ—Å—É? –ú—ã –ø—Ä–∏–µ—Ö–∞–ª–∏ –Ω–∞ –ö–ü–ü/–≤ –ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥—Å–∫ ‚Äì –∫—É–¥–∞ –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ?
3.–ì–¥–µ –Ω–∞ –ö—É—Ä—à—Å–∫–æ–π –∫–æ—Å–µ –º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å—Å—è —Å –ø–∞–ª–∞—Ç–∫–æ–π?
4.–ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é –Ω–∞ –ö—É—Ä—à—Å–∫—É—é –∫–æ—Å—É?
5.–ù—É–∂–Ω–æ –ª–∏ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø–æ–∫—É–ø–∞—Ç—å –≤—Ö–æ–¥–Ω–æ–π –±–∏–ª–µ—Ç –ø—Ä–∏ –≤—ä–µ–∑–¥–µ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä–∫–∞?
6.–ï—Å–ª–∏ –ø—Ä–∏–µ—Ö–∞—Ç—å –≤–µ—á–µ—Ä–æ–º –∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å—Å—è –Ω–∞ –ö—É—Ä—à—Å–∫–æ–π –∫–æ—Å–µ –Ω–∞ –Ω–æ—á–ª–µ–≥, –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å —Å–Ω–æ–≤–∞ –ø–æ–∫—É–ø–∞—Ç—å –≤—Ö–æ–¥–Ω–æ–π –±–∏–ª–µ—Ç –≤ –ø–∞—Ä–∫?
7.–ö–∞–∫ –ø–æ–∫—É–ø–∞—Ç—å –≤—Ö–æ–¥–Ω—ã–µ –±–∏–ª–µ—Ç—ã –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è–º, –≤—ä–µ–∑–∂–∞—é—â–∏–º –Ω–∞ —Ä–µ–π—Å–æ–≤—ã—Ö –∞–≤—Ç–æ–±—É—Å–∞—Ö, –∏ –≤ –∫–∞–∫–∏—Ö —Å–ª—É—á–∞—è—Ö –∏–º –º–æ–∂–Ω–æ –Ω–µ –ø–æ–∫—É–ø–∞—Ç—å –±–∏–ª–µ—Ç—ã?
–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ /question (—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞)
–ù–∞–ø—Ä–∏–º–µ—Ä: /question –∫–∞–∫ –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –Ω–∞ –∫—É—Ä—à—Å–∫–æ–π –∫–æ—Å–µ?
"""), reply_markup=builder.as_markup())
# –û—Ç–ø—Ä–∞–≤–∫–∞ feedback-–∞

@dp.message(F.text.startswith("üìù"))
async def feedback(message: types.Message):
    await message.answer(msg_trans(message, "–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, –Ω–∞–ø—Ä–∏–º–µ—Ä –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ :)"))
    await message.answer(text=msg_trans(message, "–¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –Ω–∞–ø–∏—à–∏—Ç–µ: ")+" /feedback "+msg_trans(message, bot_msg=" —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏\n\n–ø—Ä–∏–º–µ—Ä:\n/")+"feedback "+msg_trans(message, bot_msg="–º–Ω–µ —Ç—É—Ç –æ—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏ –±–æ—Ç —É –≤–∞—Å –∫–ª–∞—Å—Å–Ω—ã—ã–π!"))
#–û—Ç–ø—Ä–∞–≤–∫–∞ feedback-a –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ

@dp.message(Command("feedback"))
async def send_feedback(message: types.Message, command: CommandObject):
    print("something")
    # if len(command.args) < 10:
    #     await message.answer(msg_trans(message, "–¢–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –¥–ª–∏–Ω–Ω–µ–µ."))
    # else:
    #     port = 465  # For SSL
    #     smtp_server = "smtp.gmail.com"
    #     sender_email = "aalexdeada@gmail.com"  # Enter your address
    #     receiver_email = "aaa.deadcode@gmail.com"  # Enter receiver address
    #     password = "7263194728301853"
    #
    #     msg = EmailMessage()
    #     msg.set_content(command.args)
    #     msg['Subject'] = "Hello Underworld from Python Gmail!"
    #     msg['From'] = sender_email
    #     msg['To'] = receiver_email
    #
    #     context = ssl.create_default_context()
    #     with smtplib.SMTP_SSL(smtp_server, port, context=context) as server:
    #         server.login(sender_email, password)
    #         server.send_message(msg, from_addr=sender_email, to_addrs=receiver_email)
    await message.answer(text=msg_trans(message, "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"))

@dp.message(F.text.startswith("üìú"))
async def show_rules(message: types.Message):
    f_btn = InlineKeyboardButton(text=msg_trans(message, "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é"), url="https://park-kosa.ru/pravila-poseshheniya-parka")
    mrkp = InlineKeyboardMarkup(inline_keyboard=[[f_btn]])
    await message.answer(text=msg_trans(message=message, bot_msg="""–£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä–∫–∞ –ø—Ä–æ—Å–∏–º —Å–æ–±–ª—é–¥–∞—Ç—å –Ω–∏–∂–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:
1. –°–ª–µ–¥—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–∏—è–º –Ω–∞ —Ç–∞–±–ª–∏—á–∫–∞—Ö –∏ –Ω–µ –æ—Ç–∫–ª–æ–Ω—è–π—Ç–µ—Å—å –æ—Ç –º–∞—Ä—à—Ä—É—Ç–∞.
2. –ù–µ –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –º—É—Å–æ—Ä –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫–∞.
3. –ù–µ –∫–æ—Ä–º–∏—Ç–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ –Ω–µ –ø—Ä–∏–±–ª–∏–∂–∞–π—Ç–µ—Å—å –∫ –Ω–∏–º –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—å—à–µ 10 –º–µ—Ç—Ä–æ–≤.
4. –ù–µ —Å–æ–±–∏—Ä–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏ –Ω–µ –ª–æ–º–∞–π—Ç–µ –≤–µ—Ç–∫–∏.
5. –ù–µ —Ä–∞–∑–≤–æ–¥–∏—Ç–µ –∫–æ—Å—Ç—Ä—ã –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫–∞.
6. –°–æ–±–ª—é–¥–∞–π—Ç–µ —Ç–∏—à–∏–Ω—É –∏ –Ω–µ —à—É–º–∏—Ç–µ, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ –ø—Ä–∏—Ä–æ–¥—ã.
7. –ù–µ –∫—É–ø–∞–π—Ç–µ—Å—å –≤ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –∏ –Ω–µ –∑–∞–≥—Ä—è–∑–Ω—è–π—Ç–µ –≤–æ–¥—É.
8. –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –Ω–µ –ø–æ–¥–≤–µ—Ä–≥–∞–π—Ç–µ —Å–µ–±—è –æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
9. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –¥–µ—Ç—å–º–∏ –∏ –Ω–µ –¥–æ–ø—É—Å–∫–∞–π—Ç–µ –∏—Ö –±–µ—Å–ø–æ—Ä—è–¥–æ—á–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è.
10. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫ - —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —É–≥–æ–ª–æ–∫ –ø—Ä–∏—Ä–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –±–µ—Ä–µ—á—å –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–æ–∫–æ–ª–µ–Ω–∏–π."""),reply_markup=mrkp)

@dp.callback_query(F.data.in_({f"{i}" for i in range(1,8)}))
async def regular_QandA(message):
    with open("answrs.txt", "r", encoding="UTF-8") as f:
        all_answrs = f.read().split("#")
        print(len(all_answrs))
        await bot.send_message(chat_id=message.from_user.id, text=msg_trans(message=message,bot_msg=all_answrs[int(message.data)-1]))

@dp.message(F.text.startswith("‚õÖÔ∏è"))
async def show_weather(message):
    data = get_weather_data()
    print(data, type(data))

    await message.answer(text=msg_trans(message,"–ø–æ–≥–æ–¥–∞ –Ω–∞ –ö—É—Ä—à—Å–∫–æ–π –∫–æ—Å–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 24 —á–∞—Å–∞:"))
    await message.answer(text=msg_trans(message, bot_msg=data))
    # message.answer(text=msg_trans(message=message, bot_msg=data))


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    # sched.create_backup()
    asyncio.run(main())